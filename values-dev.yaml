# --- BACKEND: pedido-backend ---
backend:
  replicaCount: 1

  image:
  
    repository: milazroleon/order-api
    tag: latest
    pullPolicy: IfNotPresent


  containerPort: 8080
  service:
    type: ClusterIP
    port: 8080

  # Probes tolerantes mientras arranca/conecta a DB
  readinessProbe:
    httpGet: { path: "/actuator/health", port: http }
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 12
  livenessProbe:
    httpGet: { path: "/actuator/health", port: http }
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 2
    failureThreshold: 6
  startupProbe:
    httpGet: { path: "/actuator/health", port: http }
    initialDelaySeconds: 10
    periodSeconds: 20

  # HPA corregido
  hpa:
    enabled: true
    minReplicas: 2
    maxReplicas: 6
    cpu:
      averageUtilization: 80
    memory:
      averageUtilization: 70

  env:
    db:
      host: ""        # ignorado por echo-server
      port: 5432
      name: "orders"
      user: "appuser"
      password: "devpass"

  # Vars que Spring Boot sí lee por defecto
  extraEnv:
    - name: SPRING_DATASOURCE_URL
      value: "jdbc:postgresql://pedido-dev-postgresql:5432/orders"
    - name: SPRING_DATASOURCE_USERNAME
      value: "appuser"
    - name: SPRING_DATASOURCE_PASSWORD
      value: "devpass"
    # Si tu app necesita crear tablas automáticamente:
    # - name: SPRING_JPA_HIBERNATE_DDL_AUTO
    #   value: update

  secrets:
    existingSecretName: ""  # dejamos que el chart cree el Secret si lo necesita

# --- FRONTEND: nginxdemos/hello ---
frontend:
  replicaCount: 2
  image:
    repository: nginxdemos/hello
    tag: latest
    pullPolicy: IfNotPresent
  containerPort: 80
  service:
    type: ClusterIP
    port: 80
  resources:
    requests: { cpu: 50m, memory: 64Mi }
    limits:   { cpu: 300m, memory: 256Mi }
  readinessProbe:
    httpGet: { path: "/", port: http }
    initialDelaySeconds: 3
    periodSeconds: 10
  livenessProbe:
    httpGet: { path: "/", port: http }
    initialDelaySeconds: 5
    periodSeconds: 20

# --- DB: PostgreSQL ---
postgresql:
  enabled: true
  auth:
    username: appuser
    password: devpass
    database: orders
  primary:
    persistence:
      enabled: true
      size: 1Gi

# --- GLOBAL OVERRIDES ---
global:
  fullnameOverride: ""
  nameOverride: ""
