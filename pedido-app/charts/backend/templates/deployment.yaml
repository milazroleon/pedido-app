apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      containers:
        - name: backend
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPort | default 8080 }}
              protocol: TCP
          env:
            - name: JAVA_OPTS
              value: "-Dspring.datasource.url=jdbc:postgresql://pedido-dev-postgresql:5432/orders -Dspring.datasource.username=appuser -Dspring.datasource.password=devpass"
            # URL de conexión (desde ConfigMap generado por el chart)
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "backend.fullname" . }}-config
                  key: SPRING_DATASOURCE_URL

            # Credenciales (desde Secret generado por el chart)
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-db" (include "backend.fullname" .)) .Values.secrets.existingSecretName }}
                  key: DB_USER
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-db" (include "backend.fullname" .)) .Values.secrets.existingSecretName }}
                  key: DB_PASSWORD

            # Variables DB_* (si tu app también las usa)
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ include "backend.fullname" . }}-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "backend.fullname" . }}-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ include "backend.fullname" . }}-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-db" (include "backend.fullname" .)) .Values.secrets.existingSecretName }}
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-db" (include "backend.fullname" .)) .Values.secrets.existingSecretName }}
                  key: DB_PASSWORD

          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
